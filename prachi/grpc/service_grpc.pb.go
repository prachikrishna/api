// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WordServiceClient is the client API for WordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WordServiceClient interface {
	GetWCount(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type wordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWordServiceClient(cc grpc.ClientConnInterface) WordServiceClient {
	return &wordServiceClient{cc}
}

func (c *wordServiceClient) GetWCount(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/grpc.WordService/GetWCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WordServiceServer is the server API for WordService service.
// All implementations must embed UnimplementedWordServiceServer
// for forward compatibility
type WordServiceServer interface {
	GetWCount(context.Context, *GetRequest) (*GetResponse, error)
	mustEmbedUnimplementedWordServiceServer()
}

// UnimplementedWordServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWordServiceServer struct {
}

func (UnimplementedWordServiceServer) GetWCount(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWCount not implemented")
}
func (UnimplementedWordServiceServer) mustEmbedUnimplementedWordServiceServer() {}

// UnsafeWordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WordServiceServer will
// result in compilation errors.
type UnsafeWordServiceServer interface {
	mustEmbedUnimplementedWordServiceServer()
}

func RegisterWordServiceServer(s grpc.ServiceRegistrar, srv WordServiceServer) {
	s.RegisterService(&WordService_ServiceDesc, srv)
}

func _WordService_GetWCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordServiceServer).GetWCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.WordService/GetWCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordServiceServer).GetWCount(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WordService_ServiceDesc is the grpc.ServiceDesc for WordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.WordService",
	HandlerType: (*WordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWCount",
			Handler:    _WordService_GetWCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
